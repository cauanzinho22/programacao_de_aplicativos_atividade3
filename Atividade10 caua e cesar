import java.sql.*;
import java.util.*;

class Aluno {
    private int id;
    private String nome;

    public Aluno() {}

    public Aluno(int id, String nome) {
        this.id = id;
        this.nome = nome;
    }

    public int getId() {
        return id;
    }

    public String getNome() {
        return nome;
    }

    public void setId(int id) {
        this.id = id;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }
}

class ConexaoDAO {
    private Connection getConnection() throws SQLException {
        String url = "jdbc:mysql://localhost:3306/escola";
        String usuario = "root";
        String senha = "sua_senha";
        return DriverManager.getConnection(url, usuario, senha);
    }

    public void cadastrarAluno(Aluno aluno) {
        String sql = "INSERT INTO alunos (id, nome) VALUES (?, ?)";

        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, aluno.getId());
            stmt.setString(2, aluno.getNome());
            stmt.executeUpdate();
            System.out.println("Aluno cadastrado com sucesso.");
        } catch (SQLException e) {
            System.out.println("Erro ao cadastrar aluno: " + e.getMessage());
        }
    }

    public List<Aluno> listarAlunos() {
        List<Aluno> lista = new ArrayList<>();
        String sql = "SELECT * FROM alunos";

        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                Aluno aluno = new Aluno();
                aluno.setId(rs.getInt("id"));
                aluno.setNome(rs.getString("nome"));
                lista.add(aluno);
            }

        } catch (SQLException e) {
            System.out.println("Erro ao listar alunos: " + e.getMessage());
        }

        return lista;
    }

    public void atualizarAluno(Aluno aluno) {
        String sql = "UPDATE alunos SET nome = ? WHERE id = ?";

        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, aluno.getNome());
            stmt.setInt(2, aluno.getId());
            int linhasAfetadas = stmt.executeUpdate();

            if (linhasAfetadas > 0) {
                System.out.println("Aluno atualizado com sucesso.");
            } else {
                System.out.println("Aluno não encontrado.");
            }

        } catch (SQLException e) {
            System.out.println("Erro ao atualizar aluno: " + e.getMessage());
        }
    }

    public void deletarAluno(int id) {
        String sql = "DELETE FROM alunos WHERE id = ?";

        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, id);
            int linhasAfetadas = stmt.executeUpdate();

            if (linhasAfetadas > 0) {
                System.out.println("Aluno removido com sucesso.");
            } else {
                System.out.println("Aluno não encontrado.");
            }

        } catch (SQLException e) {
            System.out.println("Erro ao remover aluno: " + e.getMessage());
        }
    }
}

public class SistemaAlunos {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ConexaoDAO dao = new ConexaoDAO();

        while (true) {
            System.out.println("\n===== Sistema de Gerenciamento de Alunos =====");
            System.out.println("1 - Cadastrar aluno");
            System.out.println("2 - Listar alunos");
            System.out.println("3 - Atualizar aluno");
            System.out.println("4 - Remover aluno");
            System.out.println("0 - Sair");
            System.out.print("Escolha uma opção: ");

            String opcao = scanner.nextLine();

            switch (opcao) {
                case "1":
                    try {
                        System.out.print("Informe o ID do aluno: ");
                        int idCadastro = Integer.parseInt(scanner.nextLine());
                        System.out.print("Informe o nome do aluno: ");
                        String nomeCadastro = scanner.nextLine();
                        dao.cadastrarAluno(new Aluno(idCadastro, nomeCadastro));
                    } catch (NumberFormatException e) {
                        System.out.println("ID inválido. Use apenas números inteiros.");
                    }
                    break;

                case "2":
                    List<Aluno> alunos = dao.listarAlunos();
                    if (alunos.isEmpty()) {
                        System.out.println("Nenhum aluno cadastrado.");
                    } else {
                        System.out.println("Lista de alunos:");
                        for (Aluno aluno : alunos) {
                            System.out.printf("ID: %d | Nome: %s%n", aluno.getId(), aluno.getNome());
                        }
                    }
                    break;

                case "3":
                    try {
                        System.out.print("Informe o ID do aluno que deseja atualizar: ");
                        int idAtualizar = Integer.parseInt(scanner.nextLine());
                        System.out.print("Informe o novo nome do aluno: ");
                        String nomeAtualizar = scanner.nextLine();
                        dao.atualizarAluno(new Aluno(idAtualizar, nomeAtualizar));
                    } catch (NumberFormatException e) {
                        System.out.println("ID inválido. Use apenas números inteiros.");
                    }
                    break;

                case "4":
                    try {
                        System.out.print("Informe o ID do aluno que deseja remover: ");
                        int idRemover = Integer.parseInt(scanner.nextLine());
                        dao.deletarAluno(idRemover);
                    } catch (NumberFormatException e) {
                        System.out.println("ID inválido. Use apenas números inteiros.");
                    }
                    break;

                case "0":
                    System.out.println("Encerrando o sistema. Obrigado por utilizar.");
                    return;

                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        }
    }
}
